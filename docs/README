Overview:
Play a complete game of three trios with two players, and code it with room for later modification.
Playing this game should consist of a place phase, battle phase, and combo phase.
The entirety of the game should be displayed using a text based view.

Quick start:
PlayerFactory factory = new PlayerFactory();
Scanner sc = new Scanner(System.in);
ThreeTriosModel<PlayingCard> model = new TTModel();
Player<PlayingCard> p1 = factory.stringToPlayer(model, sc.next());
Player<PlayingCard> p2 = factory.stringToPlayer(model, sc.next());

model = new TTModel(p1, p2);
p1.setModel(model);
p2.setModel(model);

File cardsFile = new File("docs" + File.separator + "cards1");
File gridFile = new File("docs" + File.separator + "3x3Grid");
List<List<Cell<PlayingCard>>> grid = FileHandler.readGrid(gridFile);
List<PlayingCard> cards = FileHandler.readCards(cardsFile);
int rows = FileHandler.readRowNum(gridFile);
int cols = FileHandler.readColNum(gridFile);

model.startGame(grid, cards, rows, cols);

ThreeTriosFrame view = new TTGuiView(model);
ThreeTriosFrame view2 = new TTGuiView(model);

ThreeTriosController controller = new TTController(model, p1, view);
ThreeTriosController controller2 = new TTController(model, p2, view2);

controller.playGame();
controller2.playGame();


Key Components:
Model
-Based on a text file input (which is parsed) allocate the specifications for the
grid and player (size, cards)
-Instantiates the grid and player hands
-Play cards from hand to grid to locations as specified by the input from controller
-Verify game states post move (has the game started, do any cards battle,
is the game over, who won the game)
View
-A Simple text based view that displays the grid, the players hands,
as well as what color player the card belongs to as denoted by "R" or "B"
based on the contents as given by the model (grid, hand)
Controller
-A gui based controller that displays a three trios board
-Events to the board are handled by this controller and update the view and model as necessary
- Displays popup messages as necessary to guide player (does not stop game or write to console)
-Displays a game over pop up once the game is over

Key Sub-Components:
Grid
- is arena where three trios is played
Players (playerOne, playerTwo)
- the players control a hand of cards
- they play these cards onto the grid
- these cards battle adjacent cards of the opposite player
- if they win the battled card now belongs to the player that won
- causing a combo effect if multiple cards lose to their adjacent competitor
Grid Cells (must be an odd number)
- Hole Cell is a cell that cannot contain a card
- Card Cell is a cell that can contain a card and belong to a player
- # of playable cells is the count of Card Cells in the Grid without a card
Player Cards
- Have a color associated with the given player
- Can exist on the grid or in the players hand
- # is equal to the (# Card Cells on the grid + 1) / 2 per player

Source Organization:
MODEL:
  Card (Interface)
    - PlayingCard (Class)
    - CardValue (Enumeration)

  Cell (Interface) <C extends Card>
    - CardCell (Class) <PlayingCard>
    - HoleCell (Class) <PlayingCard>

  Player (Interface) <C extends Card>
     - TTPlayer (Class) <PlayingCard>

  ThreeTriosModel (Interface) <C extends Card>
    - TTModel (Class) <PlayingCard>

  - PlayerColor (Enumeration)
  - CardinalDirection (Enumeration)

VIEW:
  ThreeTriosView (Interface) <C extends Card>
    - TTTextBasedView (Class) <PlayingCard>

Changes for part 2
- Added numFlipped() to count the number of cards flipped with a turn.
- Changed the signatures of playGame and playCard to be in line with
  what was discussed in class.
- made FileHandler as a helper class to extract relevant data from files.
- Added an invariant as that was left out.
- Added GUI view, built with JFrame extensions and JPanels for cards/cells

Changes for part 3
- Added ThreeTriosController, which mediates between the view and the model.
- Model status acts as an observer for new turn events and updates via the controller as necessary
- Updated strategies and view orientation to actually display correct behaviors (strategies work as
  intended, view is always proportioned correctly)
- Multiple views are displayed simultaneously and update synchronously